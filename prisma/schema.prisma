// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(uuid())
  username        String   @unique
  hashed_password String
  store           Store?
  // sessions        Session[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// model Session {
//   id        String   @id
//   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId    String
//   expiresAt DateTime
// }

model TokenBlacklist {
  id        String    @id @default(uuid())
  token     String    @unique
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Store {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  status      String?
  nif         String?
  stat        String?
  address     String?
  city        String?
  phone       String?
  email       String?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String    @unique
  cashDesk    CashDesk?
  articles    Article[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Client      Client[]
}

model Article {
  id            String        @id @default(uuid())
  name          String
  purchasePrice Float
  sellingPrice  Float
  stock         Int
  unit          String
  store         Store         @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId       String
  transactions  Transaction[]
  orderItems    OrderItem[]
  invoiceItems  InvoiceItem[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Transaction {
  id         String    @id @default(uuid())
  type       String
  amount     Float
  label      String
  articles   Article[]
  cashDesk   CashDesk  @relation(fields: [cashDeskId], references: [id], onDelete: Cascade)
  cashDeskId String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model CashDesk {
  id            String        @id
  currentAmount Float
  store         Store         @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId       String        @unique
  Transaction   Transaction[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Client {
  id        String    @id @default(uuid())
  name      String
  email     String?
  phone     String?
  address   String?
  city      String?
  store     Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId   String
  orders    Order[]
  invoices  Invoice[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Order {
  id          String      @id @default(uuid())
  client      Client      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId    String
  status      String
  isPaid      Boolean     @default(false)
  isDelivered Boolean     @default(false)
  invoice     Invoice?
  orderItems  OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invoice {
  id           String        @id @default(uuid())
  order        Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId      String        @unique
  client       Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId     String        @unique
  amount       Float
  status       String
  invoiceItems InvoiceItem[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model InvoiceItem {
  id        String   @id @default(uuid())
  invoice   Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId String
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// enum TransactionTypes {
//   IN
//   OUT
// }

// enum OrderStatus {
//   PENDING
//   SHIPPED
//   DELIVERED
// }

// enum InvoiceStatus {
//   UNPAID
//   PAID
// }
